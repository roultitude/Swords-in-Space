//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SwordsInSpace
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerView"",
            ""id"": ""98bd7db0-909d-47eb-b3b3-1391216cc2e6"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""bf1a3a22-ffbd-4e24-94bf-6b389c73ddb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""8bc5f1de-e25d-41ad-802e-39ea1aad2f2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83816b69-93b0-4d4a-a968-08837168fbf8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b5dce7c-8f51-4f5e-958e-e4288a808476"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SteeringView"",
            ""id"": ""0347baa0-3295-436a-8ae4-c752517820ae"",
            ""actions"": [
                {
                    ""name"": ""NitroThrust"",
                    ""type"": ""Button"",
                    ""id"": ""97e37869-17fc-423a-9f73-f28a2b7f670f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForwardThrust"",
                    ""type"": ""Button"",
                    ""id"": ""200175e2-a8ef-4363-a2d7-4dd0d0916cbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OffThrust"",
                    ""type"": ""Button"",
                    ""id"": ""1979d0a0-a702-4faf-a228-508f99dd758e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackThrust"",
                    ""type"": ""Button"",
                    ""id"": ""9bbf4c52-0e73-4ce2-b555-8d0479a890f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be1b3977-e229-4a91-a1b7-2229dd684835"",
                    ""path"": ""<Keyboard>/numpad9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NitroThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02a70e13-bce6-4968-be55-d89333ca0741"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4c9f0d3-006d-4303-a2a7-4c5b676ecd87"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OffThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6672cb5-d230-4409-b4a1-3eb5ea242d9c"",
                    ""path"": ""<Keyboard>/numpadPeriod"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackThrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponView"",
            ""id"": ""33cb8946-9e2c-4a06-be4d-72c3f6a6d287"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""PassThrough"",
                    ""id"": ""81118847-c8ed-4776-8c7f-a682635e328f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteerTest"",
                    ""type"": ""Button"",
                    ""id"": ""86369d71-b7a4-491e-83c9-bcce40af21e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleAutoFire"",
                    ""type"": ""Button"",
                    ""id"": ""47d37ad3-c695-4dcc-bab6-b4d2701fc712"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e2933dc-2a7b-4cf5-a87d-6b933e3f4e41"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24778aa4-a61d-4854-93a5-3c5af133b7f6"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleAutoFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a8824e4-4ab6-4902-a3f8-a889f27d7524"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AlwaysOn"",
            ""id"": ""6c3879f4-fc15-49e7-9746-e952e7c59956"",
            ""actions"": [
                {
                    ""name"": ""ExitUI"",
                    ""type"": ""Button"",
                    ""id"": ""ab9b512e-9793-4f61-a191-f18345b91ad2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""55831843-3a54-472b-a9c8-8e7102d273c9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8baa5e0f-605a-42cb-a386-30095ab03b43"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c05f5f6f-5a5e-4e22-a695-d6c20ba99f1b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f2de5331-5464-4672-9fb8-075a7ef1ccd7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c279a0a2-7507-4ca4-b4cc-fdf7e28312f8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""01c9350b-b9d3-4ad3-858d-d52ffa6b9948"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf29e1ec-25ee-4b96-96a9-37a170a8e068"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""acf8d579-646b-451f-a49e-1724e61b044d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PassiveShieldView"",
            ""id"": ""a84d04c3-f281-479e-a025-a626f29083c9"",
            ""actions"": [
                {
                    ""name"": ""LeftDrumstick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0fbb38bd-e296-4b14-b57d-0dd62d4b5122"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightDrumstick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ddda6858-afae-4258-b56b-5b54126be2f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e85c9ba-3f90-4872-929a-9b4b58f9576a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftDrumstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""807e1ec6-c7f6-45b6-8d45-6a0487dad97a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftDrumstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d26ee8c2-72a4-45c7-9af9-e569c0492396"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightDrumstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac87f17d-0a2e-4302-a76a-44c4bc99bd9b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightDrumstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerView
            m_PlayerView = asset.FindActionMap("PlayerView", throwIfNotFound: true);
            m_PlayerView_Dash = m_PlayerView.FindAction("Dash", throwIfNotFound: true);
            m_PlayerView_Interact = m_PlayerView.FindAction("Interact", throwIfNotFound: true);
            // SteeringView
            m_SteeringView = asset.FindActionMap("SteeringView", throwIfNotFound: true);
            m_SteeringView_NitroThrust = m_SteeringView.FindAction("NitroThrust", throwIfNotFound: true);
            m_SteeringView_ForwardThrust = m_SteeringView.FindAction("ForwardThrust", throwIfNotFound: true);
            m_SteeringView_OffThrust = m_SteeringView.FindAction("OffThrust", throwIfNotFound: true);
            m_SteeringView_BackThrust = m_SteeringView.FindAction("BackThrust", throwIfNotFound: true);
            // WeaponView
            m_WeaponView = asset.FindActionMap("WeaponView", throwIfNotFound: true);
            m_WeaponView_Fire = m_WeaponView.FindAction("Fire", throwIfNotFound: true);
            m_WeaponView_SteerTest = m_WeaponView.FindAction("SteerTest", throwIfNotFound: true);
            m_WeaponView_ToggleAutoFire = m_WeaponView.FindAction("ToggleAutoFire", throwIfNotFound: true);
            // AlwaysOn
            m_AlwaysOn = asset.FindActionMap("AlwaysOn", throwIfNotFound: true);
            m_AlwaysOn_ExitUI = m_AlwaysOn.FindAction("ExitUI", throwIfNotFound: true);
            m_AlwaysOn_Move = m_AlwaysOn.FindAction("Move", throwIfNotFound: true);
            // PassiveShieldView
            m_PassiveShieldView = asset.FindActionMap("PassiveShieldView", throwIfNotFound: true);
            m_PassiveShieldView_LeftDrumstick = m_PassiveShieldView.FindAction("LeftDrumstick", throwIfNotFound: true);
            m_PassiveShieldView_RightDrumstick = m_PassiveShieldView.FindAction("RightDrumstick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerView
        private readonly InputActionMap m_PlayerView;
        private IPlayerViewActions m_PlayerViewActionsCallbackInterface;
        private readonly InputAction m_PlayerView_Dash;
        private readonly InputAction m_PlayerView_Interact;
        public struct PlayerViewActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerViewActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Dash => m_Wrapper.m_PlayerView_Dash;
            public InputAction @Interact => m_Wrapper.m_PlayerView_Interact;
            public InputActionMap Get() { return m_Wrapper.m_PlayerView; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerViewActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerViewActions instance)
            {
                if (m_Wrapper.m_PlayerViewActionsCallbackInterface != null)
                {
                    @Dash.started -= m_Wrapper.m_PlayerViewActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_PlayerViewActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_PlayerViewActionsCallbackInterface.OnDash;
                    @Interact.started -= m_Wrapper.m_PlayerViewActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_PlayerViewActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_PlayerViewActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_PlayerViewActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public PlayerViewActions @PlayerView => new PlayerViewActions(this);

        // SteeringView
        private readonly InputActionMap m_SteeringView;
        private ISteeringViewActions m_SteeringViewActionsCallbackInterface;
        private readonly InputAction m_SteeringView_NitroThrust;
        private readonly InputAction m_SteeringView_ForwardThrust;
        private readonly InputAction m_SteeringView_OffThrust;
        private readonly InputAction m_SteeringView_BackThrust;
        public struct SteeringViewActions
        {
            private @PlayerControls m_Wrapper;
            public SteeringViewActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @NitroThrust => m_Wrapper.m_SteeringView_NitroThrust;
            public InputAction @ForwardThrust => m_Wrapper.m_SteeringView_ForwardThrust;
            public InputAction @OffThrust => m_Wrapper.m_SteeringView_OffThrust;
            public InputAction @BackThrust => m_Wrapper.m_SteeringView_BackThrust;
            public InputActionMap Get() { return m_Wrapper.m_SteeringView; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SteeringViewActions set) { return set.Get(); }
            public void SetCallbacks(ISteeringViewActions instance)
            {
                if (m_Wrapper.m_SteeringViewActionsCallbackInterface != null)
                {
                    @NitroThrust.started -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnNitroThrust;
                    @NitroThrust.performed -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnNitroThrust;
                    @NitroThrust.canceled -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnNitroThrust;
                    @ForwardThrust.started -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnForwardThrust;
                    @ForwardThrust.performed -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnForwardThrust;
                    @ForwardThrust.canceled -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnForwardThrust;
                    @OffThrust.started -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnOffThrust;
                    @OffThrust.performed -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnOffThrust;
                    @OffThrust.canceled -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnOffThrust;
                    @BackThrust.started -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnBackThrust;
                    @BackThrust.performed -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnBackThrust;
                    @BackThrust.canceled -= m_Wrapper.m_SteeringViewActionsCallbackInterface.OnBackThrust;
                }
                m_Wrapper.m_SteeringViewActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @NitroThrust.started += instance.OnNitroThrust;
                    @NitroThrust.performed += instance.OnNitroThrust;
                    @NitroThrust.canceled += instance.OnNitroThrust;
                    @ForwardThrust.started += instance.OnForwardThrust;
                    @ForwardThrust.performed += instance.OnForwardThrust;
                    @ForwardThrust.canceled += instance.OnForwardThrust;
                    @OffThrust.started += instance.OnOffThrust;
                    @OffThrust.performed += instance.OnOffThrust;
                    @OffThrust.canceled += instance.OnOffThrust;
                    @BackThrust.started += instance.OnBackThrust;
                    @BackThrust.performed += instance.OnBackThrust;
                    @BackThrust.canceled += instance.OnBackThrust;
                }
            }
        }
        public SteeringViewActions @SteeringView => new SteeringViewActions(this);

        // WeaponView
        private readonly InputActionMap m_WeaponView;
        private IWeaponViewActions m_WeaponViewActionsCallbackInterface;
        private readonly InputAction m_WeaponView_Fire;
        private readonly InputAction m_WeaponView_SteerTest;
        private readonly InputAction m_WeaponView_ToggleAutoFire;
        public struct WeaponViewActions
        {
            private @PlayerControls m_Wrapper;
            public WeaponViewActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Fire => m_Wrapper.m_WeaponView_Fire;
            public InputAction @SteerTest => m_Wrapper.m_WeaponView_SteerTest;
            public InputAction @ToggleAutoFire => m_Wrapper.m_WeaponView_ToggleAutoFire;
            public InputActionMap Get() { return m_Wrapper.m_WeaponView; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WeaponViewActions set) { return set.Get(); }
            public void SetCallbacks(IWeaponViewActions instance)
            {
                if (m_Wrapper.m_WeaponViewActionsCallbackInterface != null)
                {
                    @Fire.started -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnFire;
                    @Fire.performed -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnFire;
                    @Fire.canceled -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnFire;
                    @SteerTest.started -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnSteerTest;
                    @SteerTest.performed -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnSteerTest;
                    @SteerTest.canceled -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnSteerTest;
                    @ToggleAutoFire.started -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnToggleAutoFire;
                    @ToggleAutoFire.performed -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnToggleAutoFire;
                    @ToggleAutoFire.canceled -= m_Wrapper.m_WeaponViewActionsCallbackInterface.OnToggleAutoFire;
                }
                m_Wrapper.m_WeaponViewActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Fire.started += instance.OnFire;
                    @Fire.performed += instance.OnFire;
                    @Fire.canceled += instance.OnFire;
                    @SteerTest.started += instance.OnSteerTest;
                    @SteerTest.performed += instance.OnSteerTest;
                    @SteerTest.canceled += instance.OnSteerTest;
                    @ToggleAutoFire.started += instance.OnToggleAutoFire;
                    @ToggleAutoFire.performed += instance.OnToggleAutoFire;
                    @ToggleAutoFire.canceled += instance.OnToggleAutoFire;
                }
            }
        }
        public WeaponViewActions @WeaponView => new WeaponViewActions(this);

        // AlwaysOn
        private readonly InputActionMap m_AlwaysOn;
        private IAlwaysOnActions m_AlwaysOnActionsCallbackInterface;
        private readonly InputAction m_AlwaysOn_ExitUI;
        private readonly InputAction m_AlwaysOn_Move;
        public struct AlwaysOnActions
        {
            private @PlayerControls m_Wrapper;
            public AlwaysOnActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ExitUI => m_Wrapper.m_AlwaysOn_ExitUI;
            public InputAction @Move => m_Wrapper.m_AlwaysOn_Move;
            public InputActionMap Get() { return m_Wrapper.m_AlwaysOn; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AlwaysOnActions set) { return set.Get(); }
            public void SetCallbacks(IAlwaysOnActions instance)
            {
                if (m_Wrapper.m_AlwaysOnActionsCallbackInterface != null)
                {
                    @ExitUI.started -= m_Wrapper.m_AlwaysOnActionsCallbackInterface.OnExitUI;
                    @ExitUI.performed -= m_Wrapper.m_AlwaysOnActionsCallbackInterface.OnExitUI;
                    @ExitUI.canceled -= m_Wrapper.m_AlwaysOnActionsCallbackInterface.OnExitUI;
                    @Move.started -= m_Wrapper.m_AlwaysOnActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_AlwaysOnActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_AlwaysOnActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_AlwaysOnActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ExitUI.started += instance.OnExitUI;
                    @ExitUI.performed += instance.OnExitUI;
                    @ExitUI.canceled += instance.OnExitUI;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public AlwaysOnActions @AlwaysOn => new AlwaysOnActions(this);

        // PassiveShieldView
        private readonly InputActionMap m_PassiveShieldView;
        private IPassiveShieldViewActions m_PassiveShieldViewActionsCallbackInterface;
        private readonly InputAction m_PassiveShieldView_LeftDrumstick;
        private readonly InputAction m_PassiveShieldView_RightDrumstick;
        public struct PassiveShieldViewActions
        {
            private @PlayerControls m_Wrapper;
            public PassiveShieldViewActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftDrumstick => m_Wrapper.m_PassiveShieldView_LeftDrumstick;
            public InputAction @RightDrumstick => m_Wrapper.m_PassiveShieldView_RightDrumstick;
            public InputActionMap Get() { return m_Wrapper.m_PassiveShieldView; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PassiveShieldViewActions set) { return set.Get(); }
            public void SetCallbacks(IPassiveShieldViewActions instance)
            {
                if (m_Wrapper.m_PassiveShieldViewActionsCallbackInterface != null)
                {
                    @LeftDrumstick.started -= m_Wrapper.m_PassiveShieldViewActionsCallbackInterface.OnLeftDrumstick;
                    @LeftDrumstick.performed -= m_Wrapper.m_PassiveShieldViewActionsCallbackInterface.OnLeftDrumstick;
                    @LeftDrumstick.canceled -= m_Wrapper.m_PassiveShieldViewActionsCallbackInterface.OnLeftDrumstick;
                    @RightDrumstick.started -= m_Wrapper.m_PassiveShieldViewActionsCallbackInterface.OnRightDrumstick;
                    @RightDrumstick.performed -= m_Wrapper.m_PassiveShieldViewActionsCallbackInterface.OnRightDrumstick;
                    @RightDrumstick.canceled -= m_Wrapper.m_PassiveShieldViewActionsCallbackInterface.OnRightDrumstick;
                }
                m_Wrapper.m_PassiveShieldViewActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LeftDrumstick.started += instance.OnLeftDrumstick;
                    @LeftDrumstick.performed += instance.OnLeftDrumstick;
                    @LeftDrumstick.canceled += instance.OnLeftDrumstick;
                    @RightDrumstick.started += instance.OnRightDrumstick;
                    @RightDrumstick.performed += instance.OnRightDrumstick;
                    @RightDrumstick.canceled += instance.OnRightDrumstick;
                }
            }
        }
        public PassiveShieldViewActions @PassiveShieldView => new PassiveShieldViewActions(this);
        public interface IPlayerViewActions
        {
            void OnDash(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
        public interface ISteeringViewActions
        {
            void OnNitroThrust(InputAction.CallbackContext context);
            void OnForwardThrust(InputAction.CallbackContext context);
            void OnOffThrust(InputAction.CallbackContext context);
            void OnBackThrust(InputAction.CallbackContext context);
        }
        public interface IWeaponViewActions
        {
            void OnFire(InputAction.CallbackContext context);
            void OnSteerTest(InputAction.CallbackContext context);
            void OnToggleAutoFire(InputAction.CallbackContext context);
        }
        public interface IAlwaysOnActions
        {
            void OnExitUI(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
        }
        public interface IPassiveShieldViewActions
        {
            void OnLeftDrumstick(InputAction.CallbackContext context);
            void OnRightDrumstick(InputAction.CallbackContext context);
        }
    }
}
